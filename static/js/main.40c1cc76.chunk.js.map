{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["db","PouchDB","window","__db","settingsReducer","state","action","type","Object","objectSpread","apiKey","payload","username","repo","defaultSettings","Settings","_ref4","dispatch","react_default","a","createElement","Fragment","value","onChange","e","currentTarget","Listing","_ref5","connect","query","queryRequested","concat","queryReviewed","_ref6","fetching","loaded","data","error","refetch","onClick","skipCache","requested","nodes","map","pr","App_ReviewRequest","key","id","ReviewRequest","_ref7","hasReviewed","reviews","filter","review","author","login","length","approved","toConsumableArray","pop","commented","target","rel","href","url","split","title","App","_usePouchDBReducer","reducerFn","defaultState","documentName","_useReducer","useReducer","_useReducer2","slicedToArray","reducerState","dispatchReducer","useEffect","asyncToGenerator","regenerator_default","mark","_callee","storedDocument","wrap","_context","prev","next","get","sent","t0","put","_id","stop","this","_saveState","_ref2","_callee2","localSettings","latest","doc","_context2","_rev","objectWithoutProperties","console","stack","_x","apply","arguments","saveState","debounce","_ref3","_callee3","newSettings","_context3","_x2","usePouchDBReducer","_usePouchDBReducer2","settings","dispatchSettings","client","useMemo","Client","fetchOptions","opts","headers","Content-Type","Authorization","App_Settings","provider","App_Listing","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.40c1cc76.chunk.js","sourcesContent":["import React, {useReducer, useMemo, useEffect} from 'react';\nimport './App.css';\n\nimport {Provider, Client, query, Connect} from 'urql';\nimport PouchDB from 'pouchdb-browser';\nimport debounce from 'lodash/debounce';\n\nconst db = new PouchDB('rc');\nwindow.__db = db;\n\nconst settingsReducer = (state, action) => {\n  switch (action.type) {\n    case 'api-key':\n      return {...state, apiKey: action.payload};\n    case 'username':\n      return {...state, username: action.payload};\n    case 'repo':\n      return {...state, repo: action.payload};\n    case 'update':\n      return action.payload;\n    case '@@pouch/init':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nconst defaultSettings = {\n  apiKey: '',\n  username: '',\n  repo: '',\n};\n\nconst usePouchDBReducer = (reducerFn, defaultState, documentName: string) => {\n  // TODO: pass reducer as arg\n  // TODO: pass default settings as arg?\n  // TODO: rename\n  const [reducerState, dispatchReducer] = useReducer(\n    reducerFn,\n    defaultState,\n  );\n\n  useEffect(async () => {\n    let storedDocument;\n    try {\n      storedDocument = await db.get(documentName);\n      dispatchReducer({type: '@@pouch/init', payload: storedDocument});\n    } catch (err) {\n      let response = await db.put({...defaultState,\n        _id: documentName\n      });\n      storedDocument = await db.get(documentName);\n      dispatchReducer({type: '@@pouch/init', payload: storedDocument});\n    }\n    // if (!storedDocument) {\n    //   await db.put(defaultState);\n    //   const dbDoc = await db.get(documentName);\n    //   dispatchReducer({type: '@@pouch/init', payload: dbDoc});\n    // } else {\n    //   dispatchReducer({type: '@@pouch/init', payload: storedDocument});\n    // }\n  }, [documentName]);\n\n  const _saveState = async (state: *) => {\n    try {\n      const {_rev, ...localSettings} = state;\n      const latest = await db.get(documentName);\n      const doc = {...latest, ...localSettings};\n      await db.put(doc);\n    } catch (err) {\n      console.error('there was an error saving to pouch');\n      console.error(err || err.stack);\n    }\n  };\n\n  const saveState = debounce(_saveState, 2000);\n\n  const wrappedDispatch = async (action: *) => {\n    const newSettings = reducerFn(reducerState, action);\n    dispatchReducer(action);\n    saveState(newSettings);\n  };\n  return [reducerState, wrappedDispatch];\n};\n\nconst App = () => {\n  const [settings, dispatchSettings] = usePouchDBReducer(settingsReducer, defaultSettings, 'settings');\n\n  const client = useMemo(\n    () =>\n      new Client({\n        url: 'https://api.github.com/graphql',\n        fetchOptions: () => {\n          const opts = {\n            headers: {\n              'Content-Type': 'application/json',\n            },\n          };\n          if (settings.apiKey && settings.apiKey.length === 40) {\n            opts.headers = {\n              ...opts.headers,\n              Authorization: `Bearer ${settings.apiKey}`,\n            };\n          }\n          return opts;\n        },\n      }),\n    [settings.apiKey],\n  );\n\n  return (\n    <div>\n      <Settings state={settings} dispatch={dispatchSettings} />\n\n      <Provider client={client}>\n        <Listing repo={settings.repo} username={settings.username} />\n      </Provider>\n    </div>\n  );\n};\n\nconst Settings = ({state, dispatch}) => {\n  return (\n    <React.Fragment>\n      <label>\n        username:{' '}\n        <input\n          value={state.username || ''}\n          onChange={e =>\n            dispatch({type: 'username', payload: e.currentTarget.value})\n          }\n        />\n      </label>\n      <label>\n        api-key:{' '}\n        <input\n          value={state.apiKey || ''}\n          onChange={e =>\n            dispatch({type: 'api-key', payload: e.currentTarget.value})\n          }\n        />\n      </label>\n      <label>\n        repo:{' '}\n        <input\n          value={state.repo || ''}\n          onChange={e =>\n            dispatch({type: 'repo', payload: e.currentTarget.value})\n          }\n        />\n      </label>\n    </React.Fragment>\n  );\n};\n\nconst reviewQuery = `query ($queryRequested: String!, $queryReviewed: String!) {\n  rateLimit {\n    cost\n    limit\n  }\n  reviewed: search(query: $queryReviewed, type: ISSUE, first: 20) {\n    ...prData\n  }\n  requested: search(query: $queryRequested, type: ISSUE, first: 20) {\n    ...prData\n  }\n}\n\nfragment prData on SearchResultItemConnection {\n  nodes {\n    ... on PullRequest {\n      id\n      author {\n        login\n      }\n      url\n      title\n      state\n      createdAt\n      reviews(first: 50) {\n        nodes {\n          ... on PullRequestReview {\n            author {\n              login\n            }\n            state\n            submittedAt\n          }\n        }\n      }\n    }\n  }\n}\n\n`;\n\nconst Listing = ({repo, username}) => (\n  <Connect\n    query={query(reviewQuery, {\n      queryRequested: `repo:${repo} review-requested:${username} type:pr is:open`,\n      queryReviewed: `repo:${repo} reviewed-by:${username} type:pr is:open`,\n    })}\n  >\n    {({fetching, loaded, error, data, refetch}) => (\n      <div>\n        {fetching && 'fetching...'}\n        {loaded && !fetching && 'loaded!'}\n        {loaded && (\n          <button type=\"button\" onClick={() => refetch({skipCache: true})}>\n            re-fetch data\n          </button>\n        )}\n        {loaded &&\n          data.requested.nodes.map(pr => (\n            <ReviewRequest key={pr.id} pr={pr} username={username} />\n          ))}\n      </div>\n    )}\n  </Connect>\n);\n\nconst ReviewRequest = ({pr, username}) => {\n  const hasReviewed =\n    pr.reviews.nodes.filter(\n      review =>\n        review.author.login === username && review.state !== 'COMMENTED',\n    ).length > 0;\n  const approved = [\n    ...pr.reviews.nodes.filter(\n      review => review.author.login === username && review.state === 'APPROVED',\n    ),\n  ].pop();\n  const commented =\n    pr.reviews.nodes.filter(\n      review =>\n        review.author.login === username && review.state === 'COMMENTED',\n    ).length > 0;\n  return (\n    <div>\n      {!hasReviewed && '🚨'}\n      {approved && '✅'}\n      {commented && '💬'}\n      <a target=\"_blank\" rel=\"noopener noreferrer\" href={pr.url}>\n        #{[...pr.url.split('/')].pop()} - {pr.author.login} - {pr.title}\n      </a>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}